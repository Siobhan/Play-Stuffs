/*
 * PathfindingMain.java
 *
 * Created on 16.07.2010
 *
 * Copyright (c) Hansjoerg Malthaner
 * <h_malthaner@users.sourceforge.net>
 *
 * This file is part of the Roguelike Game Kit project.
 *
 * For details, please read the license.txt file.
 */

package rgegame.demo.pathfinding;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.util.Properties;

import rgegame.control.ActionKey;
import rgegame.control.KeyInputHandler;
import rgegame.demo.walkaround.FeatureCodes;
import rgegame.demo.walkaround.LayerCodes;
import rgegame.demo.walkaround.MapDisplay;
import rgegame.demo.walkaround.actions.QuitAction;
import rgegame.entities.PlayerEntity;
import rgegame.map.data.LayeredMap;
import rgegame.map.display.ColorCodes;
import rgegame.map.generators.WildernessGenerator;

/**
 * Create a random "wilderness" map, set up a map display and
 * start the pathfinding worker thread.
 *
 * @author Hj. Malthaner
 */
public class PathfindingMain extends javax.swing.JFrame
{
    private final PlayerEntity player;
    
    /** Creates new form PathfindingMain */
    public PathfindingMain()
    {
        initComponents();

/*
        LayeredMap map = new LayeredMap(4, 65, 40);
        initMap(map);
*/
        
        Properties props = new Properties();
        props.setProperty("map_layers", "4");
        props.setProperty("grounds", ".:g, .:l, .:u");
        props.setProperty("decorations.tiles", "&:u, &:l");
        props.setProperty("decorations.chances", "100, 100");
        props.setProperty("clusters[0].tiles", "&:o, &:g, &:l, &:u");
        props.setProperty("clusters[0].chance", "150");
        props.setProperty("clusters[1].tiles", "~:b, ~:e");
        props.setProperty("clusters[1].chance", "50");
        props.setProperty("margins", "~:u, ~:d, ~:s, 0");
        props.setProperty("margin.width", "3");
        props.setProperty("borders", "^:w, ^:s, ^:u");

        WildernessGenerator wg = new WildernessGenerator(props);
        LayeredMap map = wg.generate(66, 44);

        player = new PlayerEntity(map.getSpawnX(), map.getSpawnY());

        MapDisplay mapDisplay = new MapDisplay(player);
        mapDisplay.setMap(map);

        add(mapDisplay, BorderLayout.CENTER);

        installKeyHandler(mapDisplay);

        setTitle("Roguelike Game Kit - Pathfinder Demo (v.2)");
        setSize(800, 780);

        PathfinderThread worker = new PathfinderThread(mapDisplay, player);

        worker.start();
    }

    /**
     * Install the key handlers that we need for this demo.
     *
     * @param mapDisplay The map display
     */
    private void installKeyHandler(MapDisplay mapDisplay)
    {
        mapDisplay.setFocusable(true);
        mapDisplay.requestFocusInWindow();

        KeyInputHandler keyInputHandler = new KeyInputHandler();
        mapDisplay.addKeyListener(keyInputHandler);

        QuitAction quitAction = new QuitAction(this);
        keyInputHandler.addAction(new ActionKey(KeyEvent.VK_Q, true, false), quitAction);
        keyInputHandler.addAction(new ActionKey(KeyEvent.VK_X, true, false), quitAction);
        keyInputHandler.addAction(new ActionKey(KeyEvent.VK_ESCAPE, false, false), quitAction);
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PathfindingMain().setVisible(true);
            }
        });
    }

    /**
     * Create grassy plains with random trees.
     * 
     * @param map The map to write to.
     */
    private void initMap(LayeredMap map) {
        for(int y=0; y<map.getHeight(); y++) {
            for(int x=0; x<map.getWidth(); x++) {

                // random grass
                if(Math.random() < 0.5) {
                    map.set(LayerCodes.GROUND, x, y, FeatureCodes.GROUND + ColorCodes.GREEN);
                } else {
                    map.set(LayerCodes.GROUND, x, y, FeatureCodes.GROUND + ColorCodes.LEMONGREEN);
                }

                final double density = 2.0;

                // random trees
                if(Math.random() < 0.1 * density) {
                    map.set(LayerCodes.FEATURE, x, y, FeatureCodes.WALL_BRICKS);
                    map.set(LayerCodes.MOBILES, x, y, FeatureCodes.TREE + ColorCodes.GREEN);
                }
                if(Math.random() < 0.04 * density) {
                    map.set(LayerCodes.FEATURE, x, y, FeatureCodes.WALL_BRICKS);
                    map.set(LayerCodes.MOBILES, x, y, FeatureCodes.TREE + ColorCodes.ORANGE);
                }
                if(Math.random() < 0.04*density) {
                    map.set(LayerCodes.FEATURE, x, y, FeatureCodes.WALL_BRICKS);
                    map.set(LayerCodes.MOBILES, x, y, FeatureCodes.TREE + ColorCodes.LEMONGREEN);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
